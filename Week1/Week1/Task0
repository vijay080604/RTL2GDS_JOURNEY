RISC-V Reference SoC Tapeout Program VSDTask 0: Setting Up Your Design EnvironmentWelcome to the first task of the RISC-V Reference SoC Tapeout Program! This document provides a detailed and simplified guide to setting up all the necessary tools for your digital IC design journey. A properly configured environment is crucial for a smooth workflow, and this guide will walk you through each step.1. System RequirementsBefore you begin, ensure your system meets the following specifications to handle the design tools effectively.Operating System: Ubuntu 20.04 or a newer version.Memory (RAM): A minimum of 6 GB.Storage (HDD): At least 50 GB of free space.Processor (CPU): 4 virtual CPUs (vCPUs).2. Tools Installation & VerificationThe following tools are essential for the digital IC design flow. Here are the step-by-step instructions for installing and verifying each of them.Resizing Your Ubuntu WindowThis step is specific to virtual machine users and helps in adjusting the display to fit your screen resolution seamlessly.sudo apt update
sudo apt install build-essential dkms linux-headers-$(uname -r)
cd /media/spatha/VBox_GAs_7.1.8/
./autorun.sh
YosysYosys is an open-source framework for Verilog RTL synthesis. It translates your behavioral Verilog code into a gate-level netlist.Installation Steps:Start by updating your system's package list.sudo apt-get update
Clone the Yosys source code from its official GitHub repository.git clone [https://github.com/YosysHQ/yosys.git](https://github.com/YosysHQ/yosys.git)
cd yosys
Install the required dependencies for building Yosys from source.sudo apt install make               # If 'make' is not installed
sudo apt-get install build-essential clang bison flex \
    libreadline-dev gawk tcl-dev libffi-dev git \
    graphviz xdot pkg-config python3 libboost-system-dev \
    libboost-python-dev libboost-filesystem-dev zlib1g-dev
Before compiling, you must initialize the abc submodule. This is a critical step!git submodule update --init --recursive
Finally, compile and install Yosys on your system.make
sudo make install
After installation, you can verify it by running yosys in the terminal. The output should show the tool's version and prompt.Icarus Verilog (Iverilog)Iverilog is a Verilog compiler that compiles your RTL code into a format that can be simulated.Installation Steps:Install it directly from the Ubuntu package repository.sudo apt-get update
sudo apt-get install iverilog
You can verify the installation by checking the version. The command iverilog -V should print the version number.GTKWaveGTKWave is a waveform viewer. It allows you to visualize the simulation output generated by Iverilog, which is essential for debugging your design.Installation Steps:Install it directly from the Ubuntu package repository.sudo apt-get update
sudo apt install gtkwave
You can verify the installation by running gtkwave. This should launch the GTKWave application window.3. Verification ScreenshotsTo prove that your tools are set up correctly, include screenshots of the following. You can either drag and drop the image files directly into the Markdown editor on GitHub or reference them in your repository.A screenshot of the successful Yosys installation log and the yosys command output.A screenshot showing the output of the iverilog -V command.A screenshot of the GTKWave application window after running the gtkwave command.
